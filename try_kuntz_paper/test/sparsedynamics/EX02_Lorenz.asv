% Copyright 2015, All Rights Reserved
% Code by Steven L. Brunton
% For Paper, "Discovering Governing Equations from Data: 
%        Sparse Identification of Nonlinear Dynamical Systems"
% by S. L. Brunton, J. L. Proctor, and J. N. Kutz

clear all, close all, clc
figpath = '../figures/';
addpath('./utils');
%% generate Data
load("traces.mat");
X = traces(81, :)';
X = smoothdata(X, 5);
embedding_dimension = 3;
time_delay = 1;
embedded_X = takens_embedding(X, embedding_dimension, time_delay);

polyorder = 2;
usesine = 0;
n = 3;
% sigma = 10;  % Lorenz's parameters (chaotic)
% beta = 8/3;
% rho = 28;

% x0=[0.1; 1.5; 0.1];  % Initial condition

% Integrate
% tspan=[.001:.001:100];
% N = length(tspan);
% options = odeset('RelTol',1e-12,'AbsTol',1e-12*ones(1,n));
% [t,x]=ode45(@(t,x) lorenz(t,x,sigma,beta,rho),tspan,x0,options);

%% compute Derivative
% eps = 1;
% for i=1:length(x)
%     dx(i,:) = lorenz(0,x(i,:),sigma,beta,rho);
% end
% disp(dx)
% dx = dx + eps*randn(size(dx));
dX = derv(embedded_X(:,1));%diff(embedded_X(:,1));
dY = derv(embedded_X(:,1));%diff(embedded_X(:,2));
dZ = %diff(embedded_X(:,3));
dx = [dX, dY, dZ];
% embedded_X(end, :) = [];
%% pool Data  (i.e., build library of nonlinear time series)
Theta = poolData(embedded_X,n,polyorder,usesine);
m = size(Theta,2);

%% compute Sparse regression: sequential least squares
lambda = 0.025;      % lambda is our sparsification knob.
Xi = sparsifyDynamics(Theta,dx,lambda,n);
poolDataLIST({'x','y','z'},Xi,n,polyorder,usesine);

%% FIGURE 1:  LORENZ for T\in[0,20]
% tspan = [0 20];
% [tA,xA]=ode45(@(t,x)lorenz(t,x,sigma,beta,rho),tspan,x0,options);   % true model
% [tB,xB]=ode45(@(t,x)sparseGalerkin(t,x,Xi,polyorder,usesine),tspan,x0,options);  % approximate
% 
% figure
% subplot(1,2,1)
% dtA = [0; diff(tA)];
% color_line3(xA(:,1),xA(:,2),xA(:,3),dtA,'LineWidth',1.5);
% view(27,16)
% grid on
% xlabel('x','FontSize',13)
% ylabel('y','FontSize',13)
% zlabel('z','FontSize',13)
% set(gca,'FontSize',13)
% subplot(1,2,2)
% dtB = [0; diff(tB)];
% color_line3(xB(:,1),xB(:,2),xB(:,3),dtB,'LineWidth',1.5);
% view(27,16)
% grid on
% 
% % Lorenz for t=20, dynamo view
% figure
% subplot(1,2,1)
% plot(tA,xA(:,1),'k','LineWidth',1.5), hold on
% plot(tB,xB(:,1),'r--','LineWidth',1.5)
% grid on
% xlabel('Time','FontSize',13)
% ylabel('x','FontSize',13)
% set(gca,'FontSize',13)
% subplot(1,2,2)
% plot(tA,xA(:,2),'k','LineWidth',1.5), hold on
% plot(tB,xB(:,2),'r--','LineWidth',1.5)
% grid on


% %% FIGURE 1:  LORENZ for T\in[0,250]
% tspan = [0 250];
% options = odeset('RelTol',1e-6,'AbsTol',1e-6*ones(1,n));
% [tA,xA]=ode45(@(t,x)lorenz(t,x,sigma,beta,rho),tspan,x0,options);   % true model
% [tB,xB]=ode45(@(t,x)sparseGalerkin(t,x,Xi,polyorder,usesine),tspan,x0,options);  % approximate
% 
% figure
% subplot(1,2,1)
% dtA = [0; diff(tA)];
% color_line3(xA(:,1),xA(:,2),xA(:,3),dtA,'LineWidth',1.5);
% view(27,16)
% grid on
% xlabel('x','FontSize',13)
% ylabel('y','FontSize',13)
% zlabel('z','FontSize',13)
% 
% subplot(1,2,2)
% dtB = [0; diff(tB)];
% color_line3(xB(:,1),xB(:,2),xB(:,3),dtB,'LineWidth',1.5);
% view(27,16)
% grid on
% xlabel('x')
% ylabel('y')
% zlabel('z')

function derivative = derv(y)
    % Calculate the derivative using a five-point stencil with boundary handling
    derivative = zeros(size(y));
    n = length(y);
    dx = 1
    
    % Central differences for interior points
    for i = 3:n-2
        derivative(i) = (-y(i+2) + 8*y(i+1) - 8*y(i-1) + y(i-2)) / (12 * dx); % Five-point stencil formula
    end
    
    % Forward differences for the first two points
    derivative(1) = (-25*y(1) + 48*y(2) - 36*y(3) + 16*y(4) - 3*y(5)) / (12 * dx);
    derivative(2) = (-3*y(1) - 10*y(2) + 18*y(3) - 6*y(4) + y(5)) / (12 * dx);
    
    % Backward differences for the last two points
    derivative(n-1) = (3*y(n) + 10*y(n-1) - 18*y(n-2) + 6*y(n-3) - y(n-4)) / (12 * dx);
    derivative(n) = (25*y(n) - 48*y(n-1) + 36*y(n-2) - 16*y(n-3) + 3*y(n-4)) / (12 * dx);
end